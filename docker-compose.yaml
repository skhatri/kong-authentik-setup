version: '3.2'
networks:
  gw: {}
services:
  kong-migrations:
    image: kong:2.8.0-alpine
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=${KONG_PG_HOST}
      - KONG_PG_USER=${KONG_PG_USER}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD}
    command:
      - kong
      - migrations 
      - bootstrap
    env_file:
      - .env
    depends_on: 
      postgres:
        condition: service_healthy
    container_name: kong-migrations
    networks:
      gw:
        aliases:
          - kong-migrations
  kong:
    build: .
    restart: unless-stopped
    container_name: kong
    networks:
      gw:
        aliases:
          - kong    
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=${KONG_PG_HOST}
      - KONG_PG_USER=${KONG_PG_USER}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl
      - KONG_PLUGINS=oidc,rate-limiting
    ports:
      - 8001:8001
      - 8000:8000
      - 8443:8443
      - 8444:8444
    volumes:
      - ./certs/keys:/certs
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
  postgres:
    image: postgres:13.5
    restart: unless-stopped
    container_name: postgres
    networks:
      gw:
        aliases:
          - postgres   
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init.d:/docker-entrypoint-initdb.d      
    environment:
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    depends_on: []
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}", "-d", "${PG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5   
  redis:
    image: redis:alpine
    restart: unless-stopped
    container_name: redis
    networks:
      gw:
        aliases:
          - redis   
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.3.3}
    restart: unless-stopped
    command: server
    container_name: server
    networks:
      gw:
        aliases:
          - server    
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: ${PG_HOST}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      WORKERS: 1
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    ports:
      - "0.0.0.0:${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "0.0.0.0:${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    depends_on:
      - redis
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.3.3}
    restart: unless-stopped
    container_name: worker
    networks:
      gw:
        aliases:
          - worker      
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: ${PG_HOST}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./media:/media
      - ./certs/keys:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - server
volumes: {}

